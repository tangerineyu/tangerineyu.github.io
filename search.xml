<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/10/06/hello-world/"/>
      <url>/2025/10/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣HOT100/最长回文子串</title>
      <link href="/2025/10/06/leetcode5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>/2025/10/06/leetcode5%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>比较难懂的一道题，我看题解看了半天才想明白<br><a href="https://leetcode.cn/problems/longest-palindromic-substring/description/?envType=problem-list-v2&amp;envId=2cktkvj">题目链接</a><br>第一想法是暴力枚举所有的子串，然后判断是否回文，但是太过复杂，判断子串回文要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,一共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n ^ 2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的子串，整体的时间复杂度就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n ^ 3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，有点慢</p><h3 id="方法一：中心扩展法">方法一：中心扩展法</h3><p>回文串无论长短都是中心对称的，这个方法就是遍历中心，然后不断扩展，唯一注意的就是回文串长度是奇数还是偶数，奇数是以字符为中心，而偶数就是以字符间的缝隙为中心，所以循环遍历的条件是<code>i &lt; 2 * n - 1</code></p><h3 id="方法二：Manacher算法">方法二：Manacher算法</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>postgreSQL学习笔记（二）</title>
      <link href="/2025/10/06/postgreSQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2025/10/06/postgreSQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="性能优化-索引">性能优化-索引</h2><ul><li>索引可以提升数据库查询性能</li><li>索引是预先创建的一种有序的数据结构</li></ul><h3 id="创建索引">创建索引</h3><p><code>CREATE INDEX index_name ON table_name (column_name);</code></p><h3 id="验证索引是否生效">验证索引是否生效</h3><p><code>EXPLAIN SELECT * FROM table_name WHERE indexed_column = 'some_value';</code></p><ul><li>Seq Scan表示使用全表扫描没用索引</li><li>Index Scan表示成功使用索引</li><li></li></ul><h3 id="索引的好处说完了，代价呢？">索引的好处说完了，代价呢？</h3><ol><li>空间成本：会占用额外的硬盘空间</li><li>维护成本：虽然增加了查询<code>SELECT</code>的速度,但是当数据库要<code>INSERT,UPDATE,DELETE</code>等操作时，还要额外操作索引，降低写操作的速度</li></ol><h3 id="使用原则">使用原则</h3><ul><li>给谁用<ul><li>出现在<code>WHERE</code>子句的列</li><li>使用<code>JOIN</code>d的列</li><li>使用<code>ORDER BY</code>的列</li></ul></li><li>谁慎用<ul><li>写的操作比较多的列</li><li>值的重复度比较高的列（比如值是性别）</li></ul></li></ul><h3 id="索引失效">索引失效</h3><p>通配符在前面的时候，索引会失效<br><code>WHERE name LIKE '张%'; </code>– 能使用索引 (从目录的’Z’部分开始找)。</p><p><code>WHERE name LIKE '%三'; </code>– 无法使用索引 (不知道从哪个字母开始找)，退化为全表扫描</p><blockquote><p>为什么有时候创建索引了但是没有使用?</p></blockquote><blockquote><p>数据库中有一个查询优化器 (Query Optimizer)，它会智能地判断使用索引的成本。<br>核心原因：当数据量非常小时，直接进行全表扫描（一眼看完一张小纸条）比先查索引再找数据（先看目录再翻页）的成本更低，效率更高。因此，优化器会智能地放弃使用索引。只有当数据量大到一定程度，索引的优势才会体现出来。</p></blockquote><h2 id="事务">事务</h2><blockquote><p>将多个操作打包，要么全部成功，要么全部失败的机制</p></blockquote><h3 id="核心命令">核心命令</h3><ul><li><code>BEGIN</code>：开启事务</li><li><code>COMMIT</code>：提交事务，将所有更改保存</li><li><code>ROLLBACK</code>：回滚事务</li><li></li></ul><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 开启事务</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">-- 2. 执行一系列操作</span></span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance - <span class="number">100</span> <span class="keyword">WHERE</span> <span class="type">name</span> = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance + <span class="number">100</span> <span class="keyword">WHERE</span> <span class="type">name</span> = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="comment">-- 3. 根据情况选择提交或回滚</span></span><br><span class="line"><span class="comment">-- 如果所有操作都成功:</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"><span class="comment">-- 如果中途发生错误或想取消:</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><h2 id="JDBC">JDBC</h2><p>依稀记得自己在寒假学java的时候看过这个课，也清楚的记得都忘光了</p><h3 id="什么是JDBC">什么是JDBC</h3><p>JDBC (Java Database Connectivity) 是Java提供的一套标准API，用于连接和操作关系型数据库。它本身是规范，需要由具体的JDBC驱动 (Driver) 来实现。</p><p>类比: JDBC是“普通话”规范，而PostgreSQL的JDBC驱动就是一个能将“普通话”翻译成“PostgreSQL方言”的翻译官。<br>使用maven添加依赖</p><h3 id="建立连接">建立连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:postgresql://localhost:5432/database_name&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;your_username&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;your_password&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password)) &#123;</span><br><span class="line">    <span class="comment">// 在这里执行数据库操作</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行查询">执行查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="comment">// ... 在 try-with-resources 块中 ...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT id, name FROM authors;&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">     <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql)) &#123;</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ID: &quot;</span> + id + <span class="string">&quot;, Name: &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行写入">执行写入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="comment">// ... 在 try-with-resources 块中 ...</span></span><br><span class="line"><span class="comment">// 使用 &#x27;?&#x27; 作为参数占位符</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO authors(name) VALUES(?);&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql)) &#123;</span><br><span class="line">    <span class="comment">// 安全地绑定参数</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>, <span class="string">&quot;新作者&quot;</span>);</span><br><span class="line">    <span class="comment">// 执行更新操作</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">affectedRows</span> <span class="operator">=</span> pstmt.executeUpdate();</span><br><span class="line">    System.out.println(affectedRows + <span class="string">&quot; 行受影响。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为防止SQL注入，必须使用<code>PreparedStatement</code>它允许我们使用 ?作为参数占位符，然后安全地将变量绑定到这些占位符上，而不是像<code>Statement</code>那样手动拼接SQL字符串。这既安全又高效。</p></blockquote><h3 id="在java中管理事务">在java中管理事务</h3><details class="toggle" ><summary class="toggle-button" style="">点击打开</summary><div class="toggle-content"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:postgresql://localhost:5432/learning_sql&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;postgres&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       setupDatabase();</span><br><span class="line">       System.out.println(<span class="string">&quot;事务演示&quot;</span>);</span><br><span class="line">       <span class="comment">//成功转账</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n[1.zhangsan 向 lisi 成功转账100.00]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;转账前账户信息：&quot;</span>);</span><br><span class="line">        selectAccounts();</span><br><span class="line">        transMoney(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="number">100.00</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;转账后账户余额&quot;</span>);</span><br><span class="line">        selectAccounts();</span><br><span class="line">        <span class="comment">//失败转账</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n[2.zhangsan 向 lisi 转账10000.00 失败]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;转账前账户信息：&quot;</span>);</span><br><span class="line">        selectAccounts();</span><br><span class="line">        transMoney(<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="number">10000.00</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;转账失败后账户余额&quot;</span>);</span><br><span class="line">        selectAccounts();</span><br><span class="line">        System.out.println(<span class="string">&quot;演示结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">transMoney</span> <span class="params">(String fromAccount, String toAccount, <span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">            <span class="comment">//关闭自动提交，开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//从转出账户中扣款</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">subtractSql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE accounts SET balance = balance - ? WHERE name = ? AND balance &gt;= ?;&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">pstmt1</span> <span class="operator">=</span> conn.prepareStatement(subtractSql)) &#123;</span><br><span class="line">                pstmt1.setDouble(<span class="number">1</span>, amount);</span><br><span class="line">                pstmt1.setString(<span class="number">2</span>, fromAccount);</span><br><span class="line">                pstmt1.setDouble(<span class="number">3</span>, amount);</span><br><span class="line">                <span class="type">int</span> <span class="variable">affectedRows</span> <span class="operator">=</span> pstmt1.executeUpdate();</span><br><span class="line">                <span class="keyword">if</span> (affectedRows == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;账户 &quot;</span> + fromAccount + <span class="string">&quot; 余额不足，无法转账。&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;从账户 &quot;</span> + fromAccount + <span class="string">&quot; 扣款 &quot;</span> + amount);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">addSql</span> <span class="operator">=</span> <span class="string">&quot;UPDATE accounts SET balance = balance + ? WHERE name = ?;&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">pstmt2</span> <span class="operator">=</span> conn.prepareStatement(addSql)) &#123;</span><br><span class="line">                pstmt2.setDouble(<span class="number">1</span>, amount);</span><br><span class="line">                pstmt2.setString(<span class="number">2</span>, toAccount);</span><br><span class="line">                pstmt2.executeUpdate();</span><br><span class="line">                System.out.println(<span class="string">&quot;向账户 &quot;</span> + toAccount + <span class="string">&quot; 增加 &quot;</span> + amount);</span><br><span class="line">            &#125;</span><br><span class="line">            conn.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功:事务已经提交&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.err.println(e.getMessage());</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;转账失败:正在回滚事务...&quot;</span>);</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                    System.out.println(<span class="string">&quot;回滚成功&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    System.err.println(<span class="string">&quot;回滚失败&quot;</span>);</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            conn.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">                            conn.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                            ex.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setupDatabase</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement()) &#123;</span><br><span class="line">            <span class="comment">//如果存在就删除旧的表</span></span><br><span class="line">            stmt.execute(<span class="string">&quot;DROP TABLE IF EXISTS accounts;&quot;</span>);</span><br><span class="line">            <span class="comment">//创建新表</span></span><br><span class="line">            stmt.execute(<span class="string">&quot;CREATE TABLE accounts (id SERIAL PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, balance NUMERIC(10,2) NOT NULL);&quot;</span>);</span><br><span class="line">            <span class="comment">//插入初始数据</span></span><br><span class="line">            stmt.execute(<span class="string">&quot;INSERT INTO accounts (name, balance) VALUES (&#x27;zhangsan&#x27;,1000.00);&quot;</span>);</span><br><span class="line">            stmt.execute(<span class="string">&quot;INSERT INTO accounts (name, balance) VALUES (&#x27;lisi&#x27;, 500.00);&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;数据库初始化成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;数据库初始化失败&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectAccounts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT name, balance FROM accounts ORDER BY name;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;账户： %s, 余额： %.2f\n&quot;</span>, rs.getString(<span class="string">&quot;name&quot;</span>), rs.getDouble(<span class="string">&quot;balance&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------------------&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>postgreSQL学习笔记（一）</title>
      <link href="/2025/10/06/postgreSQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2025/10/06/postgreSQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="postgreSQL学习笔记（一）">postgreSQL学习笔记（一）</h1><hr><p>这学期有一门课程是数据库，外教老师实在一言难尽，只好自学，看了菜鸟教程云里雾里的，然后又不喜欢看视频学习，就让gemini来教我，效果还不错</p><h2 id="基础环境">基础环境</h2><ul><li>创建数据路<br><code>CREATE DATABASE datebase_name;</code></li><li>切换数据库<br><code>\c database_name;</code></li><li>查看表结构<br><code>\d table_name;</code></li><li>创建表<br><code>CREATE TABLE table_name;</code></li></ul><h2 id="数据操作">数据操作</h2><ul><li>插入数据：<code>INSERT INTO;</code></li><li>查询数据：<code>SELECT column1,column2 FROM table_name;</code></li><li>修改数据：<code>UPDATE table_name SET column1 = new_value1 WHERE condition;</code></li><li>删除数据：必须使用where指定删除哪一行，否则会删除整个表</li><li><code>DELETE FROM table_name WHERE condition;</code></li></ul><h2 id="数据查询与表的结构修改">数据查询与表的结构修改</h2><ul><li><p>条件查询<br><code>SEWLECT * FROM table_name WHERE condition1 AND/OR condition2;</code></p></li><li><p>结果排序<br><code>SELECT * FROM table_name ORDER BY column_name ASC/DESC</code><br><code>ASC</code>(默认):升序</p></li><li><p>修改结构<br><code>ALTER TABLE table_name ADD COLUMN column_name data_type</code></p></li><li><p>主键</p><blockquote><p>作用: 唯一标识表中的每一行，其值必须唯一且不能为空 (NOT NULL)。<br>添加方式: ALTER TABLE table_name ADD PRIMARY KEY (column_name);</p></blockquote></li><li><p>自动递增主键 (SERIAL):</p><blockquote><p>作用: PostgreSQL特有的类型，用于创建一个自动递增的整数主键。插入新数据时无需手动指定ID。</p></blockquote><p><code>id SERIAL PRIMARY KEY</code></p><blockquote><p>示例:<br><code>CREATE TABLE students (         id SERIAL PRIMARY KEY,         name VARCHAR(100)     );     -- 插入时无需提供id     INSERT INTO students (name) VALUES ('小明');</code></p></blockquote></li></ul><h2 id="多表联查">多表联查</h2><ul><li><h3 id="外键">外键</h3><pre><code>-作用: 用于将一张表中的列与另一张表的主键关联起来，保证数据的引用完整性。</code></pre><code>CREATE TABLE books (     id SERIAL PRIMARY KEY,     title VARCHAR(255),     author_id INT,     FOREIGN KEY (author_id) REFERENCES     authors(id) );</code></li><li><h3 id="JOIN">JOIN</h3><ul><li>内连接 <code>INNER JOIN</code><br>返回两张表中能通过关联条件匹配上的数据。</li><li>左连接 <code>LEFT JOIN</code><br>作用：返回左面表的所有记录，以及右边表中能匹配上的记录。如果右边表没有匹配项，则用 NULL 填充。</li></ul></li><li><h3 id="子查询">子查询</h3><ul><li>返回单个值的子查询：<ul><li>返回一个值可以使用’='等比较运算符</li><li><code>... WHERE column = (SELECT single_value_column FROM ...);</code></li></ul></li><li>返回列表的子查询：<ul><li>必须用 <code>IN</code> 或 <code>NOT IN</code></li><li><code>... WHERE column IN (SELECT list_column FROM ...);</code></li></ul></li></ul></li><li><h3 id="通用表表达式（CTE）">通用表表达式（CTE）</h3><ul><li>使用<code>WITH</code>关键字定义一个临时的查询结果集，将复杂的查询拆分</li><li><code>WITH cte_name AS ( SELECT ... -- 这里是子查询的逻辑 ) SELECT ... FROM cte_name ...; -- 在主查询中使用这个临时表</code></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
